// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// calculate_h_andersen_DeepState_TestHarness_generation.cpp and calculate_h_andersen_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector calculate_h_andersen(double ndays, double delta, double mu, double theta, double omega, double lambda, NumericVector Z, double pi, double h0);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector ndays(1);
  ndays[0]  = RcppDeepState_double();
  qs::c_qsave(ndays,"/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/inputs/ndays.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ndays values: "<< ndays << std::endl;
  NumericVector delta(1);
  delta[0]  = RcppDeepState_double();
  qs::c_qsave(delta,"/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/inputs/delta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "delta values: "<< delta << std::endl;
  NumericVector mu(1);
  mu[0]  = RcppDeepState_double();
  qs::c_qsave(mu,"/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/inputs/mu.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericVector theta(1);
  theta[0]  = RcppDeepState_double();
  qs::c_qsave(theta,"/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/inputs/theta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta values: "<< theta << std::endl;
  NumericVector omega(1);
  omega[0]  = RcppDeepState_double();
  qs::c_qsave(omega,"/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/inputs/omega.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "omega values: "<< omega << std::endl;
  NumericVector lambda(1);
  lambda[0]  = RcppDeepState_double();
  qs::c_qsave(lambda,"/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/inputs/lambda.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda values: "<< lambda << std::endl;
  NumericVector Z  = RcppDeepState_NumericVector();
  qs::c_qsave(Z,"/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/inputs/Z.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Z values: "<< Z << std::endl;
  NumericVector pi(1);
  pi[0]  = RcppDeepState_double();
  qs::c_qsave(pi,"/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/inputs/pi.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "pi values: "<< pi << std::endl;
  NumericVector h0(1);
  h0[0]  = RcppDeepState_double();
  qs::c_qsave(h0,"/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/inputs/h0.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "h0 values: "<< h0 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    calculate_h_andersen(ndays[0],delta[0],mu[0],theta[0],omega[0],lambda[0],Z,pi[0],h0[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
