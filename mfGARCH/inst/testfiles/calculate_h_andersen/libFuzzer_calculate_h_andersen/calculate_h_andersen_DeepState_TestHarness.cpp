// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// calculate_h_andersen_DeepState_TestHarness_generation.cpp and calculate_h_andersen_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector calculate_h_andersen(double ndays, double delta, double mu, double theta, double omega, double lambda, NumericVector Z, double pi, double h0);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector ndays(1);
  ndays[0]  = RcppDeepState_double();
  std::string ndays_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/libFuzzer_calculate_h_andersen/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ndays.qs";
  qs::c_qsave(ndays,ndays_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ndays values: "<< ndays << std::endl;
  NumericVector delta(1);
  delta[0]  = RcppDeepState_double();
  std::string delta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/libFuzzer_calculate_h_andersen/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_delta.qs";
  qs::c_qsave(delta,delta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "delta values: "<< delta << std::endl;
  NumericVector mu(1);
  mu[0]  = RcppDeepState_double();
  std::string mu_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/libFuzzer_calculate_h_andersen/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_mu.qs";
  qs::c_qsave(mu,mu_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericVector theta(1);
  theta[0]  = RcppDeepState_double();
  std::string theta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/libFuzzer_calculate_h_andersen/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_theta.qs";
  qs::c_qsave(theta,theta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta values: "<< theta << std::endl;
  NumericVector omega(1);
  omega[0]  = RcppDeepState_double();
  std::string omega_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/libFuzzer_calculate_h_andersen/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_omega.qs";
  qs::c_qsave(omega,omega_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "omega values: "<< omega << std::endl;
  NumericVector lambda(1);
  lambda[0]  = RcppDeepState_double();
  std::string lambda_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/libFuzzer_calculate_h_andersen/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lambda.qs";
  qs::c_qsave(lambda,lambda_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda values: "<< lambda << std::endl;
  NumericVector Z  = RcppDeepState_NumericVector();
  std::string Z_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/libFuzzer_calculate_h_andersen/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Z.qs";
  qs::c_qsave(Z,Z_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Z values: "<< Z << std::endl;
  NumericVector pi(1);
  pi[0]  = RcppDeepState_double();
  std::string pi_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/libFuzzer_calculate_h_andersen/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_pi.qs";
  qs::c_qsave(pi,pi_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "pi values: "<< pi << std::endl;
  NumericVector h0(1);
  h0[0]  = RcppDeepState_double();
  std::string h0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_h_andersen/libFuzzer_calculate_h_andersen/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_h0.qs";
  qs::c_qsave(h0,h0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "h0 values: "<< h0 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    calculate_h_andersen(ndays[0],delta[0],mu[0],theta[0],omega[0],lambda[0],Z,pi[0],h0[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
