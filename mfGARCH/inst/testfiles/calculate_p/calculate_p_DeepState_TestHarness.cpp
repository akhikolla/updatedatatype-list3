// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// calculate_p_DeepState_TestHarness_generation.cpp and calculate_p_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector calculate_p(double ndays, double delta, double mu, NumericVector Zp, NumericVector h, double p0);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericVector ndays(1);
  ndays[0]  = RcppDeepState_double();
  qs::c_qsave(ndays,"/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_p/inputs/ndays.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ndays values: "<< ndays << std::endl;
  NumericVector delta(1);
  delta[0]  = RcppDeepState_double();
  qs::c_qsave(delta,"/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_p/inputs/delta.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "delta values: "<< delta << std::endl;
  NumericVector mu(1);
  mu[0]  = RcppDeepState_double();
  qs::c_qsave(mu,"/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_p/inputs/mu.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericVector Zp  = RcppDeepState_NumericVector();
  qs::c_qsave(Zp,"/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_p/inputs/Zp.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Zp values: "<< Zp << std::endl;
  NumericVector h  = RcppDeepState_NumericVector();
  qs::c_qsave(h,"/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_p/inputs/h.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "h values: "<< h << std::endl;
  NumericVector p0(1);
  p0[0]  = RcppDeepState_double();
  qs::c_qsave(p0,"/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_p/inputs/p0.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p0 values: "<< p0 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    calculate_p(ndays[0],delta[0],mu[0],Zp,h,p0[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
