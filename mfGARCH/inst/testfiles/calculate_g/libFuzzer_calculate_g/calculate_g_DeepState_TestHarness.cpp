// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// calculate_g_DeepState_TestHarness_generation.cpp and calculate_g_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector calculate_g(double omega, double alpha, double beta, double gamma, NumericVector returns, double g0);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector omega(1);
  omega[0]  = RcppDeepState_double();
  std::string omega_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_g/libFuzzer_calculate_g/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_omega.qs";
  qs::c_qsave(omega,omega_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "omega values: "<< omega << std::endl;
  NumericVector alpha(1);
  alpha[0]  = RcppDeepState_double();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_g/libFuzzer_calculate_g/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_alpha.qs";
  qs::c_qsave(alpha,alpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericVector beta(1);
  beta[0]  = RcppDeepState_double();
  std::string beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_g/libFuzzer_calculate_g/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_beta.qs";
  qs::c_qsave(beta,beta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta values: "<< beta << std::endl;
  NumericVector gamma(1);
  gamma[0]  = RcppDeepState_double();
  std::string gamma_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_g/libFuzzer_calculate_g/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_gamma.qs";
  qs::c_qsave(gamma,gamma_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gamma values: "<< gamma << std::endl;
  NumericVector returns  = RcppDeepState_NumericVector();
  std::string returns_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_g/libFuzzer_calculate_g/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_returns.qs";
  qs::c_qsave(returns,returns_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "returns values: "<< returns << std::endl;
  NumericVector g0(1);
  g0[0]  = RcppDeepState_double();
  std::string g0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mfGARCH/inst/testfiles/calculate_g/libFuzzer_calculate_g/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_g0.qs";
  qs::c_qsave(g0,g0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "g0 values: "<< g0 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    calculate_g(omega[0],alpha[0],beta[0],gamma[0],returns,g0[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
