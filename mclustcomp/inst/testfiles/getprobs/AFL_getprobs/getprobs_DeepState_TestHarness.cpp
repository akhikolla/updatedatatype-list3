// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// getprobs_DeepState_TestHarness_generation.cpp and getprobs_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List getprobs(NumericMatrix confmat, NumericVector scx, NumericVector scy, const int n, double threps);

TEST(,){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix confmat  = RcppDeepState_NumericMatrix();
  std::string confmat_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mclustcomp/inst/testfiles/getprobs/AFL_getprobs/afl_inputs/" + std::to_string(t) + "_confmat.qs";
  qs::c_qsave(confmat,confmat_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "confmat values: "<< confmat << std::endl;
  NumericVector scx  = RcppDeepState_NumericVector();
  std::string scx_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mclustcomp/inst/testfiles/getprobs/AFL_getprobs/afl_inputs/" + std::to_string(t) + "_scx.qs";
  qs::c_qsave(scx,scx_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "scx values: "<< scx << std::endl;
  NumericVector scy  = RcppDeepState_NumericVector();
  std::string scy_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mclustcomp/inst/testfiles/getprobs/AFL_getprobs/afl_inputs/" + std::to_string(t) + "_scy.qs";
  qs::c_qsave(scy,scy_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "scy values: "<< scy << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  std::string n_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mclustcomp/inst/testfiles/getprobs/AFL_getprobs/afl_inputs/" + std::to_string(t) + "_n.qs";
  qs::c_qsave(n,n_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  NumericVector threps(1);
  threps[0]  = RcppDeepState_double();
  std::string threps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mclustcomp/inst/testfiles/getprobs/AFL_getprobs/afl_inputs/" + std::to_string(t) + "_threps.qs";
  qs::c_qsave(threps,threps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "threps values: "<< threps << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    getprobs(confmat,scx,scy,n[0],threps[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
