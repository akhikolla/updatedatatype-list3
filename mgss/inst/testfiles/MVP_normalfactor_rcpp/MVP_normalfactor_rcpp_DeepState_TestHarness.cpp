// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// MVP_normalfactor_rcpp_DeepState_TestHarness_generation.cpp and MVP_normalfactor_rcpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector MVP_normalfactor_rcpp(const NumericMatrix& A, int left, int right, const NumericVector& x);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix A  = RcppDeepState_NumericMatrix();
  qs::c_qsave(A,"/home/akhila/fuzzer_packages/fuzzedpackages/mgss/inst/testfiles/MVP_normalfactor_rcpp/inputs/A.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "A values: "<< A << std::endl;
  IntegerVector left(1);
  left[0]  = RcppDeepState_int();
  qs::c_qsave(left,"/home/akhila/fuzzer_packages/fuzzedpackages/mgss/inst/testfiles/MVP_normalfactor_rcpp/inputs/left.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "left values: "<< left << std::endl;
  IntegerVector right(1);
  right[0]  = RcppDeepState_int();
  qs::c_qsave(right,"/home/akhila/fuzzer_packages/fuzzedpackages/mgss/inst/testfiles/MVP_normalfactor_rcpp/inputs/right.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "right values: "<< right << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  qs::c_qsave(x,"/home/akhila/fuzzer_packages/fuzzedpackages/mgss/inst/testfiles/MVP_normalfactor_rcpp/inputs/x.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    MVP_normalfactor_rcpp(A,left[0],right[0],x);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
