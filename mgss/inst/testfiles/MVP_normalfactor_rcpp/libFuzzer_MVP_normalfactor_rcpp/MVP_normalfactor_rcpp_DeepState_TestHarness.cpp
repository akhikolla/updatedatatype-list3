// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// MVP_normalfactor_rcpp_DeepState_TestHarness_generation.cpp and MVP_normalfactor_rcpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector MVP_normalfactor_rcpp(const NumericMatrix& A, int left, int right, const NumericVector& x);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix A  = RcppDeepState_NumericMatrix();
  std::string A_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mgss/inst/testfiles/MVP_normalfactor_rcpp/libFuzzer_MVP_normalfactor_rcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_A.qs";
  qs::c_qsave(A,A_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "A values: "<< A << std::endl;
  IntegerVector left(1);
  left[0]  = RcppDeepState_int();
  std::string left_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mgss/inst/testfiles/MVP_normalfactor_rcpp/libFuzzer_MVP_normalfactor_rcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_left.qs";
  qs::c_qsave(left,left_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "left values: "<< left << std::endl;
  IntegerVector right(1);
  right[0]  = RcppDeepState_int();
  std::string right_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mgss/inst/testfiles/MVP_normalfactor_rcpp/libFuzzer_MVP_normalfactor_rcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_right.qs";
  qs::c_qsave(right,right_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "right values: "<< right << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/mgss/inst/testfiles/MVP_normalfactor_rcpp/libFuzzer_MVP_normalfactor_rcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    MVP_normalfactor_rcpp(A,left[0],right[0],x);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
