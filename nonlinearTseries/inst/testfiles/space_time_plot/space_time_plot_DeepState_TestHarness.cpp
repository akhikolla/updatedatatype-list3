// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// space_time_plot_DeepState_TestHarness_generation.cpp and space_time_plot_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix space_time_plot(NumericMatrix phaseSpace, NumericVector radii, int nTimeSteps, int timeStep, int nPercentages);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix phaseSpace  = RcppDeepState_NumericMatrix();
  qs::c_qsave(phaseSpace,"/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/space_time_plot/inputs/phaseSpace.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "phaseSpace values: "<< phaseSpace << std::endl;
  NumericVector radii  = RcppDeepState_NumericVector();
  qs::c_qsave(radii,"/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/space_time_plot/inputs/radii.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "radii values: "<< radii << std::endl;
  IntegerVector nTimeSteps(1);
  nTimeSteps[0]  = RcppDeepState_int();
  qs::c_qsave(nTimeSteps,"/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/space_time_plot/inputs/nTimeSteps.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nTimeSteps values: "<< nTimeSteps << std::endl;
  IntegerVector timeStep(1);
  timeStep[0]  = RcppDeepState_int();
  qs::c_qsave(timeStep,"/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/space_time_plot/inputs/timeStep.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "timeStep values: "<< timeStep << std::endl;
  IntegerVector nPercentages(1);
  nPercentages[0]  = RcppDeepState_int();
  qs::c_qsave(nPercentages,"/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/space_time_plot/inputs/nPercentages.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nPercentages values: "<< nPercentages << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    space_time_plot(phaseSpace,radii,nTimeSteps[0],timeStep[0],nPercentages[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
