// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// poincare_map_DeepState_TestHarness_generation.cpp and poincare_map_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List poincare_map(const NumericMatrix& timeSeries, const NumericVector& hiperplanePoint, const NumericVector& normalVector);

TEST(,){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix timeSeries  = RcppDeepState_NumericMatrix();
  std::string timeSeries_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/poincare_map/AFL_poincare_map/afl_inputs/" + std::to_string(t) + "_timeSeries.qs";
  qs::c_qsave(timeSeries,timeSeries_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "timeSeries values: "<< timeSeries << std::endl;
  NumericVector hiperplanePoint  = RcppDeepState_NumericVector();
  std::string hiperplanePoint_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/poincare_map/AFL_poincare_map/afl_inputs/" + std::to_string(t) + "_hiperplanePoint.qs";
  qs::c_qsave(hiperplanePoint,hiperplanePoint_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "hiperplanePoint values: "<< hiperplanePoint << std::endl;
  NumericVector normalVector  = RcppDeepState_NumericVector();
  std::string normalVector_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/poincare_map/AFL_poincare_map/afl_inputs/" + std::to_string(t) + "_normalVector.qs";
  qs::c_qsave(normalVector,normalVector_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "normalVector values: "<< normalVector << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    poincare_map(timeSeries,hiperplanePoint,normalVector);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
