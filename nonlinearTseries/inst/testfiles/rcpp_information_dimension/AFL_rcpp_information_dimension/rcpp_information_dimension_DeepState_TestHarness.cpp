// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rcpp_information_dimension_DeepState_TestHarness_generation.cpp and rcpp_information_dimension_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix rcpp_information_dimension(const NumericVector& timeSeries, const IntegerVector& embeddingDimensions, int timeLag, const NumericVector& fixedMasses, double radius, double increasingRadiusFactor, int nBoxes, int nReferenceVectors, int theilerWindow, int nNeighbours);

TEST(,){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector timeSeries  = RcppDeepState_NumericVector();
  std::string timeSeries_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/rcpp_information_dimension/AFL_rcpp_information_dimension/afl_inputs/" + std::to_string(t) + "_timeSeries.qs";
  qs::c_qsave(timeSeries,timeSeries_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "timeSeries values: "<< timeSeries << std::endl;
  IntegerVector embeddingDimensions  = RcppDeepState_IntegerVector();
  std::string embeddingDimensions_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/rcpp_information_dimension/AFL_rcpp_information_dimension/afl_inputs/" + std::to_string(t) + "_embeddingDimensions.qs";
  qs::c_qsave(embeddingDimensions,embeddingDimensions_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "embeddingDimensions values: "<< embeddingDimensions << std::endl;
  IntegerVector timeLag(1);
  timeLag[0]  = RcppDeepState_int();
  std::string timeLag_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/rcpp_information_dimension/AFL_rcpp_information_dimension/afl_inputs/" + std::to_string(t) + "_timeLag.qs";
  qs::c_qsave(timeLag,timeLag_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "timeLag values: "<< timeLag << std::endl;
  NumericVector fixedMasses  = RcppDeepState_NumericVector();
  std::string fixedMasses_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/rcpp_information_dimension/AFL_rcpp_information_dimension/afl_inputs/" + std::to_string(t) + "_fixedMasses.qs";
  qs::c_qsave(fixedMasses,fixedMasses_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "fixedMasses values: "<< fixedMasses << std::endl;
  NumericVector radius(1);
  radius[0]  = RcppDeepState_double();
  std::string radius_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/rcpp_information_dimension/AFL_rcpp_information_dimension/afl_inputs/" + std::to_string(t) + "_radius.qs";
  qs::c_qsave(radius,radius_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "radius values: "<< radius << std::endl;
  NumericVector increasingRadiusFactor(1);
  increasingRadiusFactor[0]  = RcppDeepState_double();
  std::string increasingRadiusFactor_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/rcpp_information_dimension/AFL_rcpp_information_dimension/afl_inputs/" + std::to_string(t) + "_increasingRadiusFactor.qs";
  qs::c_qsave(increasingRadiusFactor,increasingRadiusFactor_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "increasingRadiusFactor values: "<< increasingRadiusFactor << std::endl;
  IntegerVector nBoxes(1);
  nBoxes[0]  = RcppDeepState_int();
  std::string nBoxes_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/rcpp_information_dimension/AFL_rcpp_information_dimension/afl_inputs/" + std::to_string(t) + "_nBoxes.qs";
  qs::c_qsave(nBoxes,nBoxes_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nBoxes values: "<< nBoxes << std::endl;
  IntegerVector nReferenceVectors(1);
  nReferenceVectors[0]  = RcppDeepState_int();
  std::string nReferenceVectors_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/rcpp_information_dimension/AFL_rcpp_information_dimension/afl_inputs/" + std::to_string(t) + "_nReferenceVectors.qs";
  qs::c_qsave(nReferenceVectors,nReferenceVectors_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nReferenceVectors values: "<< nReferenceVectors << std::endl;
  IntegerVector theilerWindow(1);
  theilerWindow[0]  = RcppDeepState_int();
  std::string theilerWindow_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/rcpp_information_dimension/AFL_rcpp_information_dimension/afl_inputs/" + std::to_string(t) + "_theilerWindow.qs";
  qs::c_qsave(theilerWindow,theilerWindow_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theilerWindow values: "<< theilerWindow << std::endl;
  IntegerVector nNeighbours(1);
  nNeighbours[0]  = RcppDeepState_int();
  std::string nNeighbours_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/rcpp_information_dimension/AFL_rcpp_information_dimension/afl_inputs/" + std::to_string(t) + "_nNeighbours.qs";
  qs::c_qsave(nNeighbours,nNeighbours_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nNeighbours values: "<< nNeighbours << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rcpp_information_dimension(timeSeries,embeddingDimensions,timeLag[0],fixedMasses,radius[0],increasingRadiusFactor[0],nBoxes[0],nReferenceVectors[0],theilerWindow[0],nNeighbours[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
