// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// get_NN_2Set_wrapper_DeepState_TestHarness_generation.cpp and get_NN_2Set_wrapper_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List get_NN_2Set_wrapper(const Rcpp::NumericMatrix& data, const Rcpp::NumericMatrix& query, int dimension, int ND, int NQ, int K, double EPS, int SEARCHTYPE, int USEBDTREE, double SQRAD, Rcpp::IntegerVector& nn_index, Rcpp::NumericVector& distances);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix data  = RcppDeepState_NumericMatrix();
  std::string data_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/libFuzzer_get_NN_2Set_wrapper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_data.qs";
  qs::c_qsave(data,data_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "data values: "<< data << std::endl;
  NumericMatrix query  = RcppDeepState_NumericMatrix();
  std::string query_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/libFuzzer_get_NN_2Set_wrapper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_query.qs";
  qs::c_qsave(query,query_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "query values: "<< query << std::endl;
  IntegerVector dimension(1);
  dimension[0]  = RcppDeepState_int();
  std::string dimension_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/libFuzzer_get_NN_2Set_wrapper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dimension.qs";
  qs::c_qsave(dimension,dimension_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dimension values: "<< dimension << std::endl;
  IntegerVector ND(1);
  ND[0]  = RcppDeepState_int();
  std::string ND_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/libFuzzer_get_NN_2Set_wrapper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ND.qs";
  qs::c_qsave(ND,ND_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ND values: "<< ND << std::endl;
  IntegerVector NQ(1);
  NQ[0]  = RcppDeepState_int();
  std::string NQ_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/libFuzzer_get_NN_2Set_wrapper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_NQ.qs";
  qs::c_qsave(NQ,NQ_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "NQ values: "<< NQ << std::endl;
  IntegerVector K(1);
  K[0]  = RcppDeepState_int();
  std::string K_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/libFuzzer_get_NN_2Set_wrapper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_K.qs";
  qs::c_qsave(K,K_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "K values: "<< K << std::endl;
  NumericVector EPS(1);
  EPS[0]  = RcppDeepState_double();
  std::string EPS_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/libFuzzer_get_NN_2Set_wrapper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_EPS.qs";
  qs::c_qsave(EPS,EPS_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "EPS values: "<< EPS << std::endl;
  IntegerVector SEARCHTYPE(1);
  SEARCHTYPE[0]  = RcppDeepState_int();
  std::string SEARCHTYPE_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/libFuzzer_get_NN_2Set_wrapper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_SEARCHTYPE.qs";
  qs::c_qsave(SEARCHTYPE,SEARCHTYPE_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "SEARCHTYPE values: "<< SEARCHTYPE << std::endl;
  IntegerVector USEBDTREE(1);
  USEBDTREE[0]  = RcppDeepState_int();
  std::string USEBDTREE_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/libFuzzer_get_NN_2Set_wrapper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_USEBDTREE.qs";
  qs::c_qsave(USEBDTREE,USEBDTREE_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "USEBDTREE values: "<< USEBDTREE << std::endl;
  NumericVector SQRAD(1);
  SQRAD[0]  = RcppDeepState_double();
  std::string SQRAD_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/libFuzzer_get_NN_2Set_wrapper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_SQRAD.qs";
  qs::c_qsave(SQRAD,SQRAD_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "SQRAD values: "<< SQRAD << std::endl;
  IntegerVector nn_index  = RcppDeepState_IntegerVector();
  std::string nn_index_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/libFuzzer_get_NN_2Set_wrapper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nn_index.qs";
  qs::c_qsave(nn_index,nn_index_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nn_index values: "<< nn_index << std::endl;
  NumericVector distances  = RcppDeepState_NumericVector();
  std::string distances_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/libFuzzer_get_NN_2Set_wrapper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_distances.qs";
  qs::c_qsave(distances,distances_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "distances values: "<< distances << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    get_NN_2Set_wrapper(data,query,dimension[0],ND[0],NQ[0],K[0],EPS[0],SEARCHTYPE[0],USEBDTREE[0],SQRAD[0],nn_index,distances);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
