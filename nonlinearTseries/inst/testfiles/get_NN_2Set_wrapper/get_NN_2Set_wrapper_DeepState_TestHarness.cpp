// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// get_NN_2Set_wrapper_DeepState_TestHarness_generation.cpp and get_NN_2Set_wrapper_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List get_NN_2Set_wrapper(const Rcpp::NumericMatrix& data, const Rcpp::NumericMatrix& query, int dimension, int ND, int NQ, int K, double EPS, int SEARCHTYPE, int USEBDTREE, double SQRAD, Rcpp::IntegerVector& nn_index, Rcpp::NumericVector& distances);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix data  = RcppDeepState_NumericMatrix();
  qs::c_qsave(data,"/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/inputs/data.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "data values: "<< data << std::endl;
  NumericMatrix query  = RcppDeepState_NumericMatrix();
  qs::c_qsave(query,"/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/inputs/query.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "query values: "<< query << std::endl;
  IntegerVector dimension(1);
  dimension[0]  = RcppDeepState_int();
  qs::c_qsave(dimension,"/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/inputs/dimension.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dimension values: "<< dimension << std::endl;
  IntegerVector ND(1);
  ND[0]  = RcppDeepState_int();
  qs::c_qsave(ND,"/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/inputs/ND.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ND values: "<< ND << std::endl;
  IntegerVector NQ(1);
  NQ[0]  = RcppDeepState_int();
  qs::c_qsave(NQ,"/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/inputs/NQ.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "NQ values: "<< NQ << std::endl;
  IntegerVector K(1);
  K[0]  = RcppDeepState_int();
  qs::c_qsave(K,"/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/inputs/K.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "K values: "<< K << std::endl;
  NumericVector EPS(1);
  EPS[0]  = RcppDeepState_double();
  qs::c_qsave(EPS,"/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/inputs/EPS.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "EPS values: "<< EPS << std::endl;
  IntegerVector SEARCHTYPE(1);
  SEARCHTYPE[0]  = RcppDeepState_int();
  qs::c_qsave(SEARCHTYPE,"/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/inputs/SEARCHTYPE.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "SEARCHTYPE values: "<< SEARCHTYPE << std::endl;
  IntegerVector USEBDTREE(1);
  USEBDTREE[0]  = RcppDeepState_int();
  qs::c_qsave(USEBDTREE,"/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/inputs/USEBDTREE.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "USEBDTREE values: "<< USEBDTREE << std::endl;
  NumericVector SQRAD(1);
  SQRAD[0]  = RcppDeepState_double();
  qs::c_qsave(SQRAD,"/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/inputs/SQRAD.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "SQRAD values: "<< SQRAD << std::endl;
  IntegerVector nn_index  = RcppDeepState_IntegerVector();
  qs::c_qsave(nn_index,"/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/inputs/nn_index.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nn_index values: "<< nn_index << std::endl;
  NumericVector distances  = RcppDeepState_NumericVector();
  qs::c_qsave(distances,"/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/get_NN_2Set_wrapper/inputs/distances.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "distances values: "<< distances << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    get_NN_2Set_wrapper(data,query,dimension[0],ND[0],NQ[0],K[0],EPS[0],SEARCHTYPE[0],USEBDTREE[0],SQRAD[0],nn_index,distances);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
