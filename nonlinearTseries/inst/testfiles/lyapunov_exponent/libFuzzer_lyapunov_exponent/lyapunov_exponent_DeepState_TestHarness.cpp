// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// lyapunov_exponent_DeepState_TestHarness_generation.cpp and lyapunov_exponent_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix lyapunov_exponent(const NumericVector& timeSeries, int minEmbeddingDim, int maxEmbeddingDim, int timeLag, double radius, int theilerWindow, int minNumNeighbours, int nRefPoints, int maxTimeSteps, int nBoxes);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector timeSeries  = RcppDeepState_NumericVector();
  std::string timeSeries_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/lyapunov_exponent/libFuzzer_lyapunov_exponent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_timeSeries.qs";
  qs::c_qsave(timeSeries,timeSeries_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "timeSeries values: "<< timeSeries << std::endl;
  IntegerVector minEmbeddingDim(1);
  minEmbeddingDim[0]  = RcppDeepState_int();
  std::string minEmbeddingDim_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/lyapunov_exponent/libFuzzer_lyapunov_exponent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_minEmbeddingDim.qs";
  qs::c_qsave(minEmbeddingDim,minEmbeddingDim_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "minEmbeddingDim values: "<< minEmbeddingDim << std::endl;
  IntegerVector maxEmbeddingDim(1);
  maxEmbeddingDim[0]  = RcppDeepState_int();
  std::string maxEmbeddingDim_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/lyapunov_exponent/libFuzzer_lyapunov_exponent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxEmbeddingDim.qs";
  qs::c_qsave(maxEmbeddingDim,maxEmbeddingDim_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxEmbeddingDim values: "<< maxEmbeddingDim << std::endl;
  IntegerVector timeLag(1);
  timeLag[0]  = RcppDeepState_int();
  std::string timeLag_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/lyapunov_exponent/libFuzzer_lyapunov_exponent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_timeLag.qs";
  qs::c_qsave(timeLag,timeLag_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "timeLag values: "<< timeLag << std::endl;
  NumericVector radius(1);
  radius[0]  = RcppDeepState_double();
  std::string radius_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/lyapunov_exponent/libFuzzer_lyapunov_exponent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_radius.qs";
  qs::c_qsave(radius,radius_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "radius values: "<< radius << std::endl;
  IntegerVector theilerWindow(1);
  theilerWindow[0]  = RcppDeepState_int();
  std::string theilerWindow_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/lyapunov_exponent/libFuzzer_lyapunov_exponent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_theilerWindow.qs";
  qs::c_qsave(theilerWindow,theilerWindow_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theilerWindow values: "<< theilerWindow << std::endl;
  IntegerVector minNumNeighbours(1);
  minNumNeighbours[0]  = RcppDeepState_int();
  std::string minNumNeighbours_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/lyapunov_exponent/libFuzzer_lyapunov_exponent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_minNumNeighbours.qs";
  qs::c_qsave(minNumNeighbours,minNumNeighbours_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "minNumNeighbours values: "<< minNumNeighbours << std::endl;
  IntegerVector nRefPoints(1);
  nRefPoints[0]  = RcppDeepState_int();
  std::string nRefPoints_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/lyapunov_exponent/libFuzzer_lyapunov_exponent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nRefPoints.qs";
  qs::c_qsave(nRefPoints,nRefPoints_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nRefPoints values: "<< nRefPoints << std::endl;
  IntegerVector maxTimeSteps(1);
  maxTimeSteps[0]  = RcppDeepState_int();
  std::string maxTimeSteps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/lyapunov_exponent/libFuzzer_lyapunov_exponent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxTimeSteps.qs";
  qs::c_qsave(maxTimeSteps,maxTimeSteps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxTimeSteps values: "<< maxTimeSteps << std::endl;
  IntegerVector nBoxes(1);
  nBoxes[0]  = RcppDeepState_int();
  std::string nBoxes_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/lyapunov_exponent/libFuzzer_lyapunov_exponent/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nBoxes.qs";
  qs::c_qsave(nBoxes,nBoxes_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nBoxes values: "<< nBoxes << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    lyapunov_exponent(timeSeries,minEmbeddingDim[0],maxEmbeddingDim[0],timeLag[0],radius[0],theilerWindow[0],minNumNeighbours[0],nRefPoints[0],maxTimeSteps[0],nBoxes[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
