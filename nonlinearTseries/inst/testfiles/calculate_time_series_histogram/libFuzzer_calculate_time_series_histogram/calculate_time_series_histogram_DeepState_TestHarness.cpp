// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// calculate_time_series_histogram_DeepState_TestHarness_generation.cpp and calculate_time_series_histogram_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix calculate_time_series_histogram(const NumericVector& x, const int& timeLag, const int& nPartitions);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/calculate_time_series_histogram/libFuzzer_calculate_time_series_histogram/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  IntegerVector timeLag(1);
  timeLag[0]  = RcppDeepState_int();
  std::string timeLag_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/calculate_time_series_histogram/libFuzzer_calculate_time_series_histogram/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_timeLag.qs";
  qs::c_qsave(timeLag,timeLag_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "timeLag values: "<< timeLag << std::endl;
  IntegerVector nPartitions(1);
  nPartitions[0]  = RcppDeepState_int();
  std::string nPartitions_t = "/home/akhila/fuzzer_packages/fuzzedpackages/nonlinearTseries/inst/testfiles/calculate_time_series_histogram/libFuzzer_calculate_time_series_histogram/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nPartitions.qs";
  qs::c_qsave(nPartitions,nPartitions_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nPartitions values: "<< nPartitions << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    calculate_time_series_histogram(x,timeLag[0],nPartitions[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
